#pragma kernel Raster

// Triangle Cube Intersection from https://bronsonzgeb.com/index.php/2021/05/29/gpu-mesh-voxelizer-part-2/

struct Triangle
{
    float3 a;
    float3 b;
    float3 c;
};

uint _TexelSize;
uint _TriangleCount;
bool _Index32Bit;

ByteAddressBuffer _IndexBuffer;
RWStructuredBuffer<bool> _Target;

// [0,1]^3
StructuredBuffer<float3> _VertexCSBuffer;


struct AABB
{
    float3 center;
    float3 extents;
};

bool IntersectsTriangleAabbSat(float3 v0, float3 v1, float3 v2, float3 aabbExtents, float3 axis)
{
    float p0 = dot(v0, axis);
    float p1 = dot(v1, axis);
    float p2 = dot(v2, axis);

    float r = aabbExtents.x * abs(dot(float3(1, 0, 0), axis)) +
        aabbExtents.y * abs(dot(float3(0, 1, 0), axis)) +
        aabbExtents.z * abs(dot(float3(0, 0, 1), axis));

    float maxP = max(p0, max(p1, p2));
    float minP = min(p0, min(p1, p2));

    return !(max(-maxP, minP) > r);
}


bool IntersectsTriangleAabb(Triangle tri, AABB aabb)
{
    tri.a -= aabb.center;
    tri.b -= aabb.center;
    tri.c -= aabb.center;

    float3 ab = normalize(tri.b - tri.a);
    float3 bc = normalize(tri.c - tri.b);
    float3 ca = normalize(tri.a - tri.c);

    //Cross ab, bc, and ca with (1, 0, 0)
    float3 a00 = float3(0.0, -ab.z, ab.y);
    float3 a01 = float3(0.0, -bc.z, bc.y);
    float3 a02 = float3(0.0, -ca.z, ca.y);

    //Cross ab, bc, and ca with (0, 1, 0)
    float3 a10 = float3(ab.z, 0.0, -ab.x);
    float3 a11 = float3(bc.z, 0.0, -bc.x);
    float3 a12 = float3(ca.z, 0.0, -ca.x);

    //Cross ab, bc, and ca with (0, 0, 1)
    float3 a20 = float3(-ab.y, ab.x, 0.0);
    float3 a21 = float3(-bc.y, bc.x, 0.0);
    float3 a22 = float3(-ca.y, ca.x, 0.0);

    if (
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a00) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a01) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a02) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a10) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a11) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a12) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a20) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a21) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a22) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(1, 0, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 1, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 0, 1)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, cross(ab, bc))
    )
    {
        return false;
    }

    return true;
}


inline float3 TexelCenterPosition(uint3 p, float texelSizeInv)
{
    return ((float3)p + 0.5) * texelSizeInv;
}

uint2 AsUint16(uint a)
{
    uint x = a >> 16;
    uint y = a & 0xFFFF;
    return uint2(x, y);
}

uint3 GetTriIndices16(uint index)
{
    uint2 triIndex = (_IndexBuffer.Load2(index * 3 * 2));
    uint2 index01 = AsUint16(triIndex.x);
    uint index2 = AsUint16(triIndex.y).x;
    return uint3(index01.x, index01.y, index2);
}

uint3 GetTriIndices32(uint index)
{
    return _IndexBuffer.Load3(index * 3 * 4);
}

[numthreads(64,1,1)]
void Raster(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= _TriangleCount) return;

    int texelSize = _TexelSize;
    float texelSizeInv = 1.0 / (float)texelSize;

    uint3 indices;
    if (_Index32Bit)
    {
        indices = GetTriIndices32(index);
    }
    else
    {
        indices = GetTriIndices16(index);
    }

    float3 p0 = _VertexCSBuffer[indices.x];
    float3 p1 = _VertexCSBuffer[indices.y];
    float3 p2 = _VertexCSBuffer[indices.z];


    Triangle tri;
    tri.a = p0;
    tri.b = p1;
    tri.c = p2;

    int3 t0 = floor(p0 * (texelSize));
    int3 t1 = floor(p1 * (texelSize));
    int3 t2 = floor(p2 * (texelSize));

    int xMin = min(t0.x, min(t1.x, t2.x));
    int xMax = max(t0.x, max(t1.x, t2.x));

    int yMin = min(t0.y, min(t1.y, t2.y));
    int yMax = max(t0.y, max(t1.y, t2.y));

    int zMin = min(t0.z, min(t1.z, t2.z));
    int zMax = max(t0.z, max(t1.z, t2.z));


    for (int x = xMin; x <= xMax; x++)
    {
        for (int y = yMin; y <= yMax; y++)
        {
            for (int z = zMin; z <= zMax; z++)
            {
                int3 texel = int3(x, y, z);
                // min maxをとるときに制限していいはず
                if (any(texel < 0) || any(texel >= texelSize)) continue;

                AABB aabb;
                aabb.center = TexelCenterPosition(texel, texelSizeInv);;
                aabb.extents = float3(texelSizeInv, texelSizeInv, texelSizeInv);

                if (IntersectsTriangleAabb(tri, aabb))
                {
                    _Target[x + y * texelSize + z * texelSize * texelSize] = true;
                }
            }
        }
    }
}
