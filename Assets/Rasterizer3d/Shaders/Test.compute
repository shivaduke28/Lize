// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// ComputeTest.MyState
struct MyState
{
    float3 Position;
    float3 Velocity;
    float Speed;
};

// shaderから読み書きするので RW
RWStructuredBuffer<MyState> myStateBuffer;

float deltaTime;
float3 target;
bool power;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;

[numthreads(10,1,1)]
// id=threadのid
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    uint index = id.x;
    MyState myState = myStateBuffer[index];
    float3 p = myState.Position;
    float3 v = normalize(target - p) * 0.1f * myState.Speed;
    float3 w = normalize(v + myState.Velocity);

    myState.Position = p + w * 0.1;
    if (power)
    {
        myState.Velocity = w;
    }
    myStateBuffer[index] = myState;
}
